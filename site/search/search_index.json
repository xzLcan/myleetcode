{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li>time complexity: <code>1 sec = 10^7 operations</code><ul> <li>If the input size is 10^6, you can only do linear algorithms  </li> <li>If the input size is 10^5, quasilinear (or better) algorithms  </li> <li>If the input size is 3000, quadratic (or better)  </li> <li>If the input size is 300, cubic (or better)  </li> <li>If the input size is 13, <code>2^n</code>, <code>n^2</code></li> </ul> </li> </ul>"},{"location":"array/","title":"Array","text":""},{"location":"array/#binary-search","title":"Binary Search","text":""},{"location":"array/#template","title":"Template","text":"<p><code>[ , )</code></p> <pre><code>def search(self, nums, target):\n    left = 0; right = len(nums)\n    while left &lt; right:\n        mid = (left + right) / 2\n        if nums[mid] &lt; target: # nums[mid-1] &lt; nums[mid] &lt; nums[mid+1]\n            left = mid + 1\n        elif nums[mid] == target: # nums[mid-1] &lt; nums[mid] &gt; nums[mid+1]\n            return mid\n        else: # # nums[mid-1] &gt; nums[mid] &gt; nums[mid+1]\n            right = mid\n    return -1\n</code></pre>"},{"location":"array/#what-i-have-done","title":"What I have done","text":"<p>162. Find Peak Element 704. Binary Search </p>"},{"location":"array/#bisect","title":"Bisect","text":"<pre><code>sorted_list = [1, 3, 4, 4, 5, 7]\nelement_to_insert = 4\nposition = bisect.bisect_left(sorted_list, element_to_insert) # position = 2\nposition = bisect.bisect_right(sorted_list, element_to_insert) # position = 4\n\nlo = 1  # \u5f00\u59cb\u67e5\u627e\u7684\u7d22\u5f15\nhi = 4  # \u7ed3\u675f\u67e5\u627e\u7684\u7d22\u5f15\uff08\u4e0d\u5305\u62ec\uff09\nposition_left = bisect.bisect_left(sorted_list, element_to_insert, lo, hi) # position_left = 2\n</code></pre> <pre><code>jobs = sorted(zip(endTime, startTime, profit))\nn = len(profit)\ndp = [0] * (n + 1)\nfor i, (e, s, p) in enumerate(jobs):\n    j = bisect_right(jobs, s, hi=i, key=lambda x: x[0])\n    dp[i + 1] = max(dp[i], dp[j] + p)\nreturn dp[n]\n</code></pre>"},{"location":"array/#what-i-have-done_1","title":"What I have done","text":"<p>2008. Maximum Earnings from Taxi 1235. Maximum Profit in Job Scheduling</p>"},{"location":"array/#sliding-window","title":"Sliding Window","text":""},{"location":"array/#template_1","title":"Template","text":"<pre><code>left = right = 0\nwhile left &lt;= right and right &lt; n:\n    if case:\n        right += 1\n    else:\n        left += 1\n</code></pre> <p>Along with priority queue.</p>"},{"location":"array/#what-i-have-done_2","title":"What I have done","text":"<p>3. Longest Substring Without Repeating Characters 76. Minimum Window Substring 209. Minimum Size Subarray Sum 239. Sliding Window Maximum </p>"},{"location":"array/#sort","title":"Sort","text":""},{"location":"array/#template_2","title":"Template","text":"<p>Sort a dictionary by key</p> <pre><code>result = sorted(test.items())\n</code></pre> <p>Sort a dictionary by value  </p> <pre><code>list.sort(self, key, reverse) # no return\nlist.sort(key=lambda x: (x**3))\n\nsorted(iterable, key=None, reverse) # with return\nresult = sorted(test, key=lambda x: x[1], reverse=True) # \n</code></pre> <pre><code>class comparator(str):\n    def __lt__(self, number): # \u91cd\u65b0\u5b9a\u4e49 &lt;\n        return number + self &gt; self + number\nresult = sorted(nums, key=comparator, reverse=True) \n</code></pre> <pre><code>lambda arguments: expression # \u533f\u540d\u51fd\u6570\uff0carguments\u662f\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\uff0cexpression\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u8868\u8fbe\u5f0f\nmap(function, iterable, ...) # \u5c06\u4e00\u4e2a\u51fd\u6570\u5e94\u7528\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6240\u6709\u9879\u76ee\nsquared = map(lambda x: x ** 2, numbers)\n\nfilter(function, iterable)\ndef is_even(n):\n    return n % 2 == 0\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter(is_even, numbers)\n</code></pre>"},{"location":"array/#what-i-have-done_3","title":"What I have done","text":"<p>179. Largest Number</p>"},{"location":"array/#heap","title":"Heap","text":""},{"location":"array/#template_3","title":"Template","text":"<pre><code>import heapq\n# Create a heap\ndef heapsort(nums):\n    h = []\n    for num in nums:\n        heapq.heappush(h, num)\n    return [heapq.heappop(h) for i in range(len(h))] # Only min-heap\n\n# Create a heap from a list\nheapq.heapify(heap)\n\n# delete target item\nindex = heap.index(target_item)  \nheap[index] = heap[0]  \nheap[0] = target_item       \n\nheapq.heappop(heap)\n</code></pre>"},{"location":"array/#what-i-have-done_4","title":"What I have done","text":"<p>215. Kth Largest Element in an Array 347. Top K Frequent Elements</p>"},{"location":"array/#two-pointer","title":"Two Pointer","text":""},{"location":"array/#template_4","title":"Template","text":"<pre><code>for i in range(n):\n    if i &gt; 0 and nums[i] == nums[i-1]:\n        continue\n    left = i+1; right = n-1\n    while left &lt; right:\n        if nums[i] + nums[left] + nums[right] == 0:\n            ans.append([nums[i], nums[left], nums[right]])\n            while nums[left] == nums[left+1] and left &lt; n - 2 :\n                left += 1\n            while nums[right] == nums[right-1] and right &gt; left:\n                right -= 1\n        if nums[i] + nums[left] + nums[right] &lt; 0:\n            left += 1\n        else:\n            right -= 1\n</code></pre>"},{"location":"array/#what-i-have-done_5","title":"What I have done","text":"<p>11. Container With Most Water 15. 3Sum 18. 4Sum </p>"},{"location":"array/#prefix-sum","title":"Prefix Sum","text":""},{"location":"array/#template_5","title":"Template","text":"<pre><code>for i in range(len(nums)):\n    prefix_num += nums[i]\n    if prefix_num - k in dic:\n        ans += dic[prefix_num-k]\n    if prefix_num in dic:\n        dic[prefix_num] += 1\n    else:\n        dic[prefix_num] = 1\n</code></pre>"},{"location":"array/#what-i-have-done_6","title":"What I have done","text":"<p>560. Subarray Sum Equals K 209. Minimum Size Subarray Sum </p>"},{"location":"bfs/","title":"BFS","text":""},{"location":"bfs/#2-d","title":"2-D","text":""},{"location":"bfs/#template","title":"Template","text":"<ul> <li>0-1 matrix</li> <li>\u6700\u77ed\u8def</li> <li>\u957f\u5ea6 &gt;= 100 (\u7528dfs\u4f1a\u8d85\u65f6)</li> </ul> <p>DFS: * \u627e\u5230\u4e00\u6761\u8def\u5f84\u5c31\u53ef\u4ee5\u8fd4\u56de</p> <pre><code>directions = [(0,1), (0,-1), (-1,-1), (-1,0), (-1,1), (1,-1), (1,0), (1,1)]\nQ = deque([(0, 0)])\nans = 1\ngrid[0][0] = 1\nwhile Q:\n    for _ in range(len(Q)):\n        x, y = Q.popleft()\n        if x == n - 1 and y == n - 1:\n            return ans\n        for dir in directions:\n            x_new = x + dir[0]\n            y_new = y + dir[1]\n            if 0&lt;=x_new&lt;n and 0&lt;=y_new&lt;n and grid[x_new][y_new] == 0:\n                grid[x_new][y_new] = 1\n                Q.append((x_new, y_new))\n    ans += 1\n</code></pre>"},{"location":"bfs/#what-i-have-done","title":"What I have done","text":"<p>542. 01 Matrix 1091. Shortest Path in Binary Matrix</p>"},{"location":"dfs/","title":"DFS","text":""},{"location":"dfs/#1-d-dfs","title":"1-D DFS","text":""},{"location":"dfs/#template","title":"Template","text":"<pre><code>ans = []\ndef dfs(idx, sum, lst):\n    if idx &gt;= len(candidates):\n        return\n    if sum + candidates[idx] == target:\n        lst.append(candidates[idx])\n        ans.append(lst)\n    elif sum + candidates[idx] &lt; target:\n        dfs(idx + 1, sum, list(lst))\n        lst.append(candidates[idx])\n        dfs(idx, sum + candidates[idx], list(lst))\n        dfs(idx + 1, sum + candidates[idx], list(lst))\ncandidates = sorted(candidates)\ndfs(0, 0, [])\nreturn list(map(list, set(map(tuple, ans))))\n</code></pre> <pre><code>def dfs(idx, target):\n    if target == 0:\n        ans.append(tmp_ans[:]) # \u6d45copy\n        return\n    for i in range(idx, len(candidates)):\n        if i &gt; idx and candidates[i] == candidates[i-1]: # \u526a\u679d\n            continue\n        if candidates[i] &gt; target:\n            break\n        tmp_ans.append(candidates[i])\n        dfs(i + 1, target - candidates[i])\n        tmp_ans.pop()\n</code></pre>"},{"location":"dfs/#what-i-have-done","title":"What I have done","text":"<p>39. Combination Sum 40. Combination Sum II 216. Combination Sum III </p>"},{"location":"dfs/#2-d-dfs","title":"2-D DFS","text":""},{"location":"dfs/#template_1","title":"Template","text":"<pre><code>def dfs(row):\n    if row == n:\n        results.append(flag[:])\n        return\n    for i in range(n):\n        if judge(row, i) or row == 0:\n            flag[i] = row\n            dfs(row+1)\n            flag[i] = -1\n</code></pre>"},{"location":"dfs/#what-i-have-done_1","title":"What I have done","text":"<p>51. N-Queens 52. N-Queens II </p>"},{"location":"dfs/#template_2","title":"Template","text":"<pre><code>directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\ndef dfs(i, j):\n    for direct in directions:\n        x = i + direct[0]\n        y = j + direct[1]\n        if x &lt; 0 or y &lt; 0 or x &gt;= m or y &gt;= n or visited[x][y] == 1:\n            continue\n        visited[x][y] = 1\n</code></pre>"},{"location":"dfs/#what-i-have-done_2","title":"What I have done","text":"<p>200. Number of Islands</p>"},{"location":"greedy/","title":"Greedy","text":"<p>\u8bc1\u660e\u6b63\u786e\u6027 compare with DP</p>"},{"location":"greedy/#what-i-have-done","title":"What I have done","text":"<p>\u5173\u4e8e\u6570\u5b57 final right and larger position 31. Next Permutation 670. Maximum Swap </p> <p>45. Jump Game II 53. Maximum Subarray 55. Jump Game 56. Merge Intervals 122. Best Time to Buy and Sell Stock II 134. Gas Station \u770b\u56fe\u60f3 \uff5c \u73af\u5f62\u53d6\u6a21 135. Candy 376. Wiggle Subsequence 406. Queue Reconstruction by Height 435. Non-overlapping Intervals 452. Minimum Number of Arrows to Burst Ballo 455. Assign Cookies 763. Partition Labels 860. Lemonade Changes 968. Binary Tree Cameras \u6811\u4e0a\u8d2a\u5fc3   1005. Maximize Sum Of Array After K Negations </p>"},{"location":"linkedlist/","title":"LinkedList","text":""},{"location":"linkedlist/#basis","title":"Basis","text":"<pre><code> class ListNode(object):\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n</code></pre> <ul> <li>head = [ ]</li> <li>only 1 item</li> <li>odd and even</li> </ul>"},{"location":"linkedlist/#fast-slow-pointer","title":"Fast &amp; Slow Pointer","text":""},{"location":"linkedlist/#template","title":"Template","text":"<pre><code>fast = slow = head\nwhile fast and fast.next:\n    fast = fast.next.next\n    slow = slow.next\n</code></pre>"},{"location":"linkedlist/#what-i-have-done","title":"What I have done","text":"<p>19. Remove Nth Node From End of List 24. Swap Nodes in Pairs 142. Linked List Cycle II </p>"},{"location":"linkedlist/#dummy-head","title":"Dummy Head","text":""},{"location":"linkedlist/#template_1","title":"Template","text":"<pre><code>dummy_head = ListNode(next=head)\ncurrent = dummy_head\nwhile current.next:\n\nreturn dummy_head.next\n</code></pre>"},{"location":"linkedlist/#what-i-have-done_1","title":"What I have done","text":"<p>203. Remove Linked List Elements</p>"},{"location":"linkedlist/#reverse-linkedlist","title":"Reverse LinkedList","text":""},{"location":"linkedlist/#template_2","title":"Template","text":"<p>reverse nodes between [start + 1, end - 1], return node on (end - 1) </p> <pre><code>    def reversek(self, start, end):\n        pre, cur = start, start.next\n        first = cur\n        while cur != end:\n            nxt = cur.next\n            cur.next = pre\n            pre = cur\n            cur = nxt\n        start.next = pre\n        first.next = cur\n        return first\n</code></pre>"},{"location":"linkedlist/#what-i-have-done_2","title":"What I have done","text":"<p>25. Reverse Nodes in k-Group</p>"},{"location":"linkedlist/#other","title":"Other","text":""},{"location":"linkedlist/#what-i-have-done_3","title":"What I have done","text":"<p>141. Linked List Cycle 206. Reverse Linked List 707. Design Linked List</p>"},{"location":"priority_queue/","title":"Priority queue","text":""},{"location":"priority_queue/#template","title":"Template","text":"<p>\u901a\u5e38\u662f\u4e00\u7ef4\u6570\u7ec4\uff0c\u8981\u5bfb\u627e\u4efb\u4e00\u4e2a\u5143\u7d20\u7684\u53f3\u8fb9\u6216\u8005\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6bd4\u81ea\u5df1\u5927\u6216\u8005\u5c0f\u7684\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u6b64\u65f6\u53ef\u4ee5\u7528\u5355\u8c03\u6808</p> <pre><code>for i in range(len(nums)):\n    if not Q or nums[Q[-1]] &gt;= nums[i]:\n        Q.append(i)\n    else:\n        while Q and nums[Q[-1]] &lt; num2[i]:\n            next_greater[Q[-1]] = i\n            Q.pop()\n        Q.append(i)\n</code></pre> <p>\u6709\u8bb8\u591a\u9ad8\u5ea6\uff0c\u6c42\u6700\u5927\u9762\u79ef</p> <pre><code>for i in range(len(height)):\n    if not Q or height[Q[-1]] &gt; height[i]:\n        Q.append(i)\n    elif height[Q[-1]] == height[i]:\n        Q.pop()\n        Q.append(i)\n    else:\n        while Q and height[i] &gt; height[Q[-1]]:\n            bottom = height[Q[-1]]; Q.pop()\n            if Q:\n                h = min(height[Q[-1]], height[i]) - bottom\n                w = i - Q[-1] - 1\n                ans += h * w\n        Q.append(i)\n</code></pre>"},{"location":"priority_queue/#what-i-have-done","title":"What I have done","text":"<p>42. Trapping Rain Water 84. Largest Rectangle in Histogram 496. Next Greater Element I 503. Next Greater Element II 739. Daily Temperatures </p>"},{"location":"simulation/","title":"Simulation","text":""},{"location":"simulation/#number-calculation","title":"Number &amp; Calculation","text":"<ul> <li>\u6570\u5b57\uff1a<ul> <li>\u957f\u5ea6\u53d8\u5316\uff1a\u8fdb\u4f4d\uff0c \u501f1</li> </ul> </li> <li>\u8fd0\u7b97\uff1a<ul> <li>\u4f18\u5148\u7ea7</li> <li>\u4ece\u5de6\u5230\u53f3</li> </ul> </li> </ul>"},{"location":"simulation/#what-i-have-done","title":"What I have done","text":"<p>227. Basic Calculator II 738. Monotone Increasing Digits</p>"}]}