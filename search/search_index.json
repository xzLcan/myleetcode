{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li>time complexity: <code>1 sec = 10^7 operations</code><ul> <li>If the input size is 10^6, you can only do linear algorithms  </li> <li>If the input size is 10^5, quasilinear (or better) algorithms  </li> <li>If the input size is 3000, quadratic (or better)  </li> <li>If the input size is 300, cubic (or better)  </li> <li>If the input size is 13, <code>2^n</code>, <code>n^2</code></li> </ul> </li> </ul>"},{"location":"array/","title":"Array","text":""},{"location":"array/#binary-search","title":"Binary Search","text":""},{"location":"array/#template","title":"Template","text":"<p><code>[ , )</code></p> <pre><code>def search(self, nums, target):\n    left = 0; right = len(nums)\n    while left &lt; right:\n        mid = (left + right) / 2\n        if nums[mid] &lt; target:\n            left = mid + 1\n        elif nums[mid] == target:\n            return mid\n        else:\n            right = mid\n    return -1\n</code></pre>"},{"location":"array/#what-i-have-done","title":"What I have done","text":"<p>704. Binary Search </p>"},{"location":"array/#sliding-window","title":"Sliding Window","text":""},{"location":"array/#template_1","title":"Template","text":"<pre><code>left = right = 0\nwhile left &lt;= right and right &lt; n:\n    if case:\n        right += 1\n    else:\n        left += 1\n</code></pre> <p>Along with priority queue.</p>"},{"location":"array/#what-i-have-done_1","title":"What I have done","text":"<p>3. Longest Substring Without Repeating Characters 76. Minimum Window Substring 209. Minimum Size Subarray Sum 239. Sliding Window Maximum</p>"},{"location":"array/#sort-heap","title":"Sort &amp; Heap","text":""},{"location":"array/#template_2","title":"Template","text":"<p>Sort a dictionary by value  </p> <pre><code>sorted_freq = dict(sorted(freq.items(), key=lambda item: item[1], reverse=True))\n</code></pre> <p>heap</p> <pre><code>def heapsort(nums):\n    h = []\n    for num in nums:\n        heappush(h, num)\n    return [heappop(h) for i in range(len(h))]\nheapq.nlargest(n, nums, key=None)\n\nheapq.nsmallest(n, iterable, key=None)\n</code></pre>"},{"location":"array/#what-i-have-done_2","title":"What I have done","text":"<p>215. Kth Largest Element in an Array 347. Top K Frequent Elements</p>"},{"location":"dfsbfs/","title":"DFSBFS","text":""},{"location":"dfsbfs/#linked-list","title":"Linked List","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"dfsbfs/#sliding-window","title":"Sliding Window","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"graph/","title":"Graph","text":""},{"location":"graph/#linked-list","title":"Linked List","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"graph/#sliding-window","title":"Sliding Window","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"linkedlist/","title":"LinkedList","text":""},{"location":"linkedlist/#basis","title":"Basis","text":"<pre><code> class ListNode(object):\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n</code></pre> <ul> <li>head = [ ]</li> <li>only 1 item</li> <li>odd and even</li> </ul>"},{"location":"linkedlist/#fast-slow-pointer","title":"Fast &amp; Slow Pointer","text":""},{"location":"linkedlist/#template","title":"Template","text":"<pre><code>fast = slow = head\nwhile fast and fast.next:\n    fast = fast.next.next\n    slow = slow.next\n</code></pre>"},{"location":"linkedlist/#what-i-have-done","title":"What I have done","text":"<p>19. Remove Nth Node From End of List 24. Swap Nodes in Pairs 142. Linked List Cycle II </p>"},{"location":"linkedlist/#dummy-head","title":"Dummy Head","text":""},{"location":"linkedlist/#template_1","title":"Template","text":"<pre><code>dummy_head = ListNode(next=head)\ncurrent = dummy_head\nwhile current.next:\n\nreturn dummy_head.next\n</code></pre>"},{"location":"linkedlist/#what-i-have-done_1","title":"What I have done","text":"<p>203. Remove Linked List Elements</p>"},{"location":"linkedlist/#reverse-linkedlist","title":"Reverse LinkedList","text":""},{"location":"linkedlist/#template_2","title":"Template","text":"<p>reverse nodes between [start + 1, end - 1], return node on (end - 1) </p> <pre><code>    def reversek(self, start, end):\n        pre, cur = start, start.next\n        first = cur\n        while cur != end:\n            nxt = cur.next\n            cur.next = pre\n            pre = cur\n            cur = nxt\n        start.next = pre\n        first.next = cur\n        return first\n</code></pre>"},{"location":"linkedlist/#what-i-have-done_2","title":"What I have done","text":"<p>25. Reverse Nodes in k-Group</p>"},{"location":"linkedlist/#other","title":"Other","text":""},{"location":"linkedlist/#what-i-have-done_3","title":"What I have done","text":"<p>141. Linked List Cycle 206. Reverse Linked List 707. Design Linked List</p>"},{"location":"string/","title":"String","text":""},{"location":"string/#linked-list","title":"Linked List","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"string/#sliding-window","title":"Sliding Window","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"}]}