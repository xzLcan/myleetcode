{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#time-complexity","title":"time complexity:","text":"<ul> <li><code>1 sec = 10^7 operations</code><ul> <li>If the input size is 10^6, you can only do linear algorithms  </li> <li>If the input size is 10^5, quasilinear (or better) algorithms  </li> <li>If the input size is 3000, quadratic (or better)  </li> <li>If the input size is 300, cubic (or better)  </li> <li>If the input size is 13, <code>2^n</code>, <code>n^2</code></li> </ul> </li> </ul>"},{"location":"#copy","title":"copy","text":"<ul> <li>\u6d45copy: references to memory addresses<ul> <li>python: <code>b = copy.copy(a)</code></li> </ul> </li> <li>\u6df1copy: \u590d\u5236\u6570\u636e\u5e76\u4fdd\u7559\u539f\u6570\u636e\u4e0d\u53d8<ul> <li>python: <code>b = a[:]</code>, <code>b = copy.deepcopy(a)</code></li> <li><code>vector&lt;int&gt; b = a;  // \u590d\u5236\u6784\u9020\u51fd\u6570\uff0c\u76f8\u5f53\u4e8e a[:], \u4fee\u6539 b\uff0c\u4e0d\u4f1a\u5f71\u54cd a</code></li> </ul> </li> <li><code>b = a</code><ul> <li>\u4e0d\u53ef\u53d8\u5bf9\u8c61 --&gt; \u6df1copy</li> <li>\u53ef\u53d8\u5bf9\u8c61 --&gt; \u6d45copy --&gt; \u4fee\u6539b\u4f1a\u4fee\u6539a</li> </ul> </li> </ul>"},{"location":"#reverse","title":"Reverse","text":"<ul> <li>python<ul> <li>list / string: <code>s[::-1]</code></li> </ul> </li> <li>c++<ul> <li>vector / string: <code>reverse(vec.begin(), vec.end())</code></li> </ul> </li> </ul>"},{"location":"#remove","title":"Remove","text":"<ul> <li>python<ul> <li>dictionary: <code>del my_dict[\"b\"]</code>, <code>my_dict.pop(\"b\")</code> (<code>\"b\"</code> is the key)</li> <li>set: <code>my_set.remove(2)</code>, <code>my_set.discard(2)</code></li> <li>list: <code>my_list.remove(3)</code> (<code>3</code> is element), <code>del my_list[2]</code>, <code>my_list.pop(2)</code> (<code>2</code> is index)</li> </ul> </li> <li>c++<ul> <li><code>my_vector.erase(my_vector.begin() + 2);</code> --&gt; <code>{1, 2, 4}</code>, <code>vector.erase(vector.begin() + 2, vector.begin() + 5);</code>\u7d22\u5f152\u5230\u7d22\u5f154\u7684\u6240\u6709\u5143\u7d20</li> <li><code>remove(my_vector.begin(), my_vector.end(), 3)</code> --&gt; <code>{1, 2, 4}</code> \u4f1a\u91cd\u65b0\u6392\u5217 vec \u4e2d\u7684\u5143\u7d20\uff0c\u6240\u6709\u503c\u4e3a value_to_remove \u7684\u5143\u7d20\u5c06\u88ab\u79fb\u5230\u5bb9\u5668\u7684\u672b\u5c3e\uff0c\u5e76\u8fd4\u56de\u65b0\u7684 \u201c\u672b\u5c3e\u201d \u8fed\u4ee3\u5668\u3002</li> </ul> </li> </ul>"},{"location":"#_1","title":"\u57fa\u7840\u6570\u636e\u7ed3\u6784","text":""},{"location":"#vector-list","title":"Vector / List","text":"<ul> <li>c++<ul> <li><code>vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt; dp(maxMove+1, vector&lt;vector&lt;int&gt;&gt;(m, vector&lt;int&gt;(n, 0)));</code></li> <li>\u63d2\u5165\uff1a <code>vec.push_back(a)</code>, <code>vec.insert(vec.begin() + 1, 10)</code>\u6307\u5b9a\u7d22\u5f15\u63d2\u5165\u5143\u7d20</li> <li>\u5220\u9664\uff1a <code>vec.pop_back()</code>, <code>vec.erase(vec.begin() + 1)</code>\u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u5143\u7d20</li> </ul> </li> </ul>"},{"location":"#pair","title":"pair","text":"<ul> <li>c++:</li> <li><code>stack&lt;pair&lt;string, int&gt;&gt; stack;</code> <code>stack.push(make_pair(currStr, currNum));</code></li> <li><code>vector&lt;pair&lt;int, int&gt;&gt; directions = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};</code></li> <li></li> </ul> <pre><code>    for (auto dir : directions) {\n        int x = i + dir.first;\n        int y = j + dir.second;\n    }\n</code></pre>"},{"location":"#map-dictionary","title":"Map / Dictionary","text":"<ul> <li>map\u662fO(logn), \u81ea\u52a8\u6309\u952e\u503c\u5347\u5e8f\u6392\u5217\uff0c unordered_map\u662fO(1)<ul> <li>map\u6309\u964d\u5e8f\u6392\u5217 <code>std::map&lt;int, std::string, std::greater&lt;int&gt;&gt; myMap;</code></li> </ul> </li> <li><code>map&lt;int, string&gt; myMap</code>  \u521d\u59cb\u5316 <li>\u521d\u59cb\u5316\u8d4b\u503c <code>myMap2 = {{1, \"one\"}, {2, \"two\"}, {3, \"three\"}};</code></li> <li>\u63d2\u5165\u5220\u9664\uff1a<code>myMap.insert({1, \"apple\"})</code>\uff0c<code>myMap.erase(2);</code></li> <li>\u67e5\u627e\u67d0\u4e2a\u503c\u662f\u5426\u5b58\u5728 <ul> <li><code>myMap.size()</code></li> <li><code>myMap.find(c) != myMap.end()</code><ul> <li><code>auto it = myMap.find(2);</code>2\u662f\u952e -&gt; \u6709 -&gt; \u8fd4\u56de\u4f4d\u7f6e\uff1b\u6ca1\u6709 -&gt; <code>it == s.end()</code></li> </ul> </li> <li><code>if (myMap.count(3) &gt; 0)</code> -&gt; \u5b58\u5728</li> </ul> </li> <li>\u8fed\u4ee3 <code>for (auto it = myMap.begin(); it != myMap.end(); ++it)</code></li> <pre><code>    for (auto it = myMap.begin(); it != myMap.end(); ++it) {\n        cout &lt;&lt; \"Key: \" &lt;&lt; it-&gt;first &lt;&lt; \", Value: \" &lt;&lt; it-&gt;second &lt;&lt; endl;\n    }\n</code></pre>"},{"location":"#set","title":"Set","text":"<p>python\u4e2dset()\u7684add, remove, find\u90fd\u662fO(1), C++\u4e2dset()\u662fO(logn), unordered_set\u662fO(1)  </p> <ul> <li>c++<ul> <li><code>unordered_set&lt;int&gt; seen{nums.begin(), nums.end()};</code></li> <li><code>seen.insert(a);</code></li> <li><code>seen.erase(a);</code> \u5220\u9664\u6240\u6709\u5143\u7d20<code>s.clear();</code></li> <li><code>if (seen.contains(a))</code></li> <li><code>auto it = s.find(a);</code> \u6709 -&gt; \u8fd4\u56de\u4f4d\u7f6e\uff1b\u6ca1\u6709 -&gt; <code>it == s.end()</code></li> </ul> </li> </ul>"},{"location":"#queue","title":"Queue","text":"<ul> <li>python: <code>collections.deque()</code><ul> <li>pop:<code>d.popleft()</code>\u5de6\u8fb9\uff0c<code>d.pop()</code>\u53f3\u8fb9</li> </ul> </li> <li>c++: <code>queue&lt;int&gt; q</code><ul> <li><code>q.push(10);</code></li> <li><code>q.front()</code> <code>q.back()</code></li> <li><code>q.pop()</code>\u5de6\u8fb9\uff0c<code>q.pop_back()</code>\u53f3\u8fb9</li> <li><code>q.empty()</code>,<code>q.size()</code></li> </ul> </li> <li>c++: <code>deque&lt;int&gt; q</code><ul> <li><code>push_back()</code>, <code>push_front()</code></li> <li><code>pop_back()</code>, <code>pop_front</code></li> <li><code>front()</code>, <code>back()</code></li> <li><code>empty()</code>, <code>size()</code></li> <li><code>c++     for (auto it = dq.begin(); it != dq.end(); ++it) {         cout &lt;&lt; *it &lt;&lt; \" \";     }</code></li> </ul> </li> </ul>"},{"location":"#stack-priority_queue","title":"Stack / priority_queue","text":"<ul> <li>c++: <code>vector&lt;int&gt; myStack;</code><ul> <li><code>myStack.push();</code></li> <li><code>myStack.top();</code></li> <li><code>myStack.pop();</code></li> </ul> </li> </ul>"},{"location":"#_2","title":"\u6307\u9488","text":"<ul> <li><code>TreeNode</code>TreeNode* root = new TreeNode(10);`</li> </ul>"},{"location":"#_3","title":"\u533f\u540d\u51fd\u6570","text":""},{"location":"#pythonlambda","title":"Python\u4e2d\u7684lambda\u51fd\u6570","text":"<pre><code>lambda arguments: expression # \u533f\u540d\u51fd\u6570\uff0carguments\u662f\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\uff0cexpression\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u8868\u8fbe\u5f0f\nmap(function, iterable, ...) # \u5c06\u4e00\u4e2a\u51fd\u6570\u5e94\u7528\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6240\u6709\u9879\u76ee\nsquared = map(lambda x: x ** 2, numbers)\n\nfilter(function, iterable)\ndef is_even(n):\n    return n % 2 == 0\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter(is_even, numbers)\n</code></pre>"},{"location":"array/","title":"Array","text":""},{"location":"array/#binary-search","title":"Binary Search","text":""},{"location":"array/#template","title":"Template","text":"<p><code>[ , )</code></p> <pre><code>left = 0; right = len(nums) # len(nums)-1\u4e5f\u53ef\u4ee5\nwhile left &lt; right:\n    mid = (left + right) / 2\n    if condition:\n        left = mid + 1\n    else: \n        right = mid\nreturn left\n</code></pre> <p>with duplicate</p> <pre><code>left, right = 0, len(nums) - 1\nwhile left &lt; right:\n    mid = (left + right) // 2\n    if nums[mid] &gt; nums[right]:\n        left = mid + 1\n    elif nums[mid] &lt; nums[right]:\n        right = mid\n    else:\n        right -= 1\nreturn nums[left]\n</code></pre> <p>with duplicate</p> <pre><code>left = 0\nright = len(nums) - 1 \nwhile left &lt;= right: # &lt;=\n    mid = (left + right) &gt;&gt; 1\n    if nums[mid] == target:\n        return True\n    if nums[left] == nums[mid] == nums[right]:\n        left += 1\n        right -= 1\n    elif nums[left] &lt;= nums[mid]:  # nums[l..m] are sorted\n        if nums[left] &lt;= target &lt; nums[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    else:  # nums[m..n - 1] are sorted\n        if nums[mid] &lt; target &lt;= nums[right]:\n            left = mid+ 1\n        else:\n            right = mid - 1\nreturn False\n</code></pre>"},{"location":"array/#what-i-have-done","title":"What I have done","text":"<p>33. Search in Rotated Sorted Array\u627e\u6570\u5b57\u7684\u8981\u7528modified binary search \ud83c\udf1f81. Search in Rotated Sorted Array IIduplicate 153. Find Minimum in Rotated Sorted Array 154. Find Minimum in Rotated Sorted Array IIduplicate 162. Find Peak Element 436. Find Right Interval\u9700\u8981\u80fd\u60f3\u5230\u662f\u4e8c\u5206 704. Binary Search </p>"},{"location":"array/#bisect","title":"Bisect","text":"<pre><code>sorted_list = [1, 3, 4, 4, 5, 7]\nelement_to_insert = 4\nposition = bisect.bisect_left(sorted_list, element_to_insert) # position = 2\nposition = bisect.bisect_right(sorted_list, element_to_insert) # position = 4\nlo = 1  # \u5f00\u59cb\u67e5\u627e\u7684\u7d22\u5f15\nhi = 4  # \u7ed3\u675f\u67e5\u627e\u7684\u7d22\u5f15\uff08\u4e0d\u5305\u62ec\uff09\nposition_left = bisect.bisect_left(sorted_list, element_to_insert, lo, hi) # position_left = 2\n</code></pre> <pre><code>jobs = sorted(zip(endTime, startTime, profit))\nn = len(profit)\ndp = [0] * (n + 1)\nfor i, (e, s, p) in enumerate(jobs):\n    j = bisect_right(jobs, s, hi=i, key=lambda x: x[0])\n    dp[i + 1] = max(dp[i], dp[j] + p)\nreturn dp[n]\n</code></pre> <p>\u7b2c\u4e00\u4e2a &gt;= target\u7684\u4f4d\u7f6e <code>position = bisect.bisect_left(sorted_list, element_to_insert) # position = 2</code> </p> <pre><code>left = 0\nright = n\nwhile left &lt; right:\n    mid = (left + right) &gt;&gt; 1\n    if nums[mid] &gt;= target:\n        right = mid\n    else:\n        left = mid + 1\nreturn left\n</code></pre> <p>\u7b2c\u4e00\u4e2a &gt; target \u4f4d\u7f6e <code>position = bisect.bisect_right(sorted_list, element_to_insert) # position = 4</code> </p> <pre><code>left = 0\nright = n\nwhile left &lt; right:\n    mid = (left + right) &gt;&gt; 1\n    if nums[mid] &lt;= target:\n        left = mid + 1\n    else:\n        right = mid\n</code></pre> <p>When the element not exists in the array <code>left &gt;= n or nums[left] != target</code></p>"},{"location":"array/#what-i-have-done_1","title":"What I have done","text":"<p>34. Find First and Last Position of Element in Sorted 1235. Maximum Profit in Job Scheduling 2008. Maximum Earnings from Taxi </p>"},{"location":"array/#sliding-window","title":"Sliding Window","text":""},{"location":"array/#template_1","title":"Template","text":"<pre><code>left = right = 0\nwhile left &lt;= right and right &lt; n: # sliding window\u7684\u5224\u65ad\u8c03\u4ef7\n    if case:\n        right += 1 # \u522b\u5fd8\u4e86right\u4e5f\u8981\u52a0\u4e00\n    else:\n        left += 1\n</code></pre> <pre><code>left = right = 0\nwhile left &lt;= right and right &lt; n:\n    if reach condition:\n        while overage:\n            left += 1\n        compute ans\n    right += 1\n</code></pre> <p>Along with priority queue.</p>"},{"location":"array/#what-i-have-done_2","title":"What I have done","text":"<p>3. Longest Substring Without Repeating Characters 76. Minimum Window Substring 209. Minimum Size Subarray Sum 239. Sliding Window Maximum 424. Longest Repeating Character Replacement 438. Find All Anagrams in a String\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210counter\u7684\u65f6\u95f4\u6bd4\u8f83\u4e45  </p>"},{"location":"array/#sort","title":"Sort","text":""},{"location":"array/#template_2","title":"Template","text":"<p>Python</p> <pre><code>result = sorted(test.items())\n</code></pre> <p>C++</p> <pre><code>sort(\u5f00\u59cb\u8fed\u4ee3\u5668, \u7ed3\u675f\u8fed\u4ee3\u5668, \u6bd4\u8f83\u51fd\u6570);\nsort(vec.begin(), vec.end(), greater&lt;int&gt;())\nsort(arr, arr + 5, [](int a, int b) {\n    return a &gt; b;  // \u964d\u5e8f\uff1aa \u5728 b \u524d\n});\nsort(words.begin(), words.end(), [](string a, string b) {\n    return a.size() &lt; b.size();  // \u957f\u5ea6\u5c0f\u7684\u6392\u5728\u524d\n});\n</code></pre> <p>Sort a dictionary by (value, key) Python</p> <pre><code>result = sorted(test.items(), key=lambda x: (x[1], x[0]), reverse=True) \n\n# Customized comparator\nclass comparator(str):\n    def __lt__(self, number): # \u91cd\u65b0\u5b9a\u4e49 &lt;\n        return number + self &gt; self + number\nresult = sorted(nums, key=comparator, reverse=True) \n</code></pre> <p>C++</p> <pre><code>map&lt;int, int&gt; m = {{1, 5}, {2, 3}, {3, 8}, {4, 6}};\n\nvector&lt;pair&lt;int, int&gt;&gt; v(m.begin(), m.end()); // \u5c06map\u7684\u5143\u7d20\u590d\u5236\u5230vector\u4e2d\nsort(v.begin(), v.end(), [](pair&lt;int, int&gt; a, pair&lt;int, int&gt; b) {\n    return a.second &lt; b.second;  // \u6309value\u5347\u5e8f\u6392\u5e8f\n});\n</code></pre>"},{"location":"array/#what-i-have-done_3","title":"What I have done","text":"<p>179. Largest Number</p>"},{"location":"array/#heap","title":"Heap","text":""},{"location":"array/#template_3","title":"Template","text":"<p>Python -&gt; heapq</p> <pre><code>import heapq\n# Create a heap\ndef heapsort(nums):\n    h = []\n    for num in nums:\n        heapq.heappush(h, num)\n    return [heapq.heappop(h) for i in range(len(h))] # Only min-heap\n\n# Create a heap from a list\nheapq.heapify(heap)\n\n# delete target item\nindex = heap.index(target_item)  \nheap[index] = heap[0]  \nheap[0] = target_item       \n\nheapq.heappop(heap)\n</code></pre> <p>C++ -&gt; priority_queue C++\u4e2d\uff0c\u6700\u5927\u5806<code>priority_queue&lt;int&gt; maxHeap;</code>\uff0c\u6700\u5c0f\u5806<code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; minHeap;</code>\uff0c\u81ea\u5b9a\u4e49\uff1a</p> <pre><code>struct Person {\n    int age;\n    string name;\n\n    bool operator&lt;(const Person&amp; other) const {\n        return age &lt; other.age;\n    }\n};\npriority_queue&lt;Person&gt; pq;\npriority_queue&lt;Person, vector&lt;Person&gt;, greater&lt;Person&gt;&gt; minHeap;\n</code></pre> <p>lambda\u8868\u8fbe\u5f0f</p> <pre><code>priority_queue&lt;int, vector&lt;int&gt;, function&lt;bool(int, int)&gt;&gt; pq(\n    [](int a, int b) { return a &gt; b; }  // \u5927\u5c0f\u6309\u964d\u5e8f\u6392\u5e8f\n);\n\n</code></pre> <pre><code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; minHeap;\nfor (const int num : nums) {\n    minHeap.push(num);\n    if (minHeap.size() &gt; k)\n    minHeap.pop();\n}\nreturn minHeap.top();\n</code></pre> <pre><code>string frequencySort(string s) {\n    auto cmp = [](pair&lt;char, int&gt; a, pair&lt;char, int&gt; b) {\n        return a.second &lt; b.second;\n    };\n    priority_queue&lt;pair&lt;char, int&gt;, vector&lt;pair&lt;char, int&gt;&gt;, decltype(cmp)&gt; pq(cmp);\n    unordered_map&lt;char, int&gt; freq;\n    for (char c : s) freq[c] ++;\n    for (auto fre : freq) \n        pq.push(make_pair(fre.first, fre.second));\n    string result = \"\";\n    while (!pq.empty()) {\n        auto tmp = pq.top();\n        pq.pop();\n        string s(tmp.second, tmp.first);\n        result += s;\n    }\n    return result;\n}\n</code></pre>"},{"location":"array/#what-i-have-done_4","title":"What I have done","text":"<p>215. Kth Largest Element in an Array 347. Top K Frequent Elements 451. Sort Characters By Frequency </p>"},{"location":"array/#two-pointer","title":"Two Pointer","text":""},{"location":"array/#template_4","title":"Template","text":"<pre><code>for i in range(n):\n    if i &gt; 0 and nums[i] == nums[i-1]:\n        continue\n    left = i+1; right = n-1\n    while left &lt; right:\n        if nums[i] + nums[left] + nums[right] == 0:\n            ans.append([nums[i], nums[left], nums[right]])\n            while nums[left] == nums[left+1] and left &lt; n - 2 :\n                left += 1\n            while nums[right] == nums[right-1] and right &gt; left:\n                right -= 1\n        if nums[i] + nums[left] + nums[right] &lt; 0:\n            left += 1\n        else:\n            right -= 1\n</code></pre>"},{"location":"array/#what-i-have-done_5","title":"What I have done","text":"<p>11. Container With Most Water 15. 3Sum 18. 4Sum </p>"},{"location":"array/#prefix-sum","title":"Prefix Sum","text":""},{"location":"array/#template_5","title":"Template","text":"<pre><code>for i in range(len(nums)):\n    prefix_num += nums[i]\n    if prefix_num - k in dic:\n        ans += dic[prefix_num-k]\n    if prefix_num in dic:\n        dic[prefix_num] += 1\n    else:\n        dic[prefix_num] = 1\n</code></pre>"},{"location":"array/#what-i-have-done_6","title":"What I have done","text":"<p>560. Subarray Sum Equals K 209. Minimum Size Subarray Sum </p>"},{"location":"array/#_1","title":"\u5355\u8c03\u6808","text":""},{"location":"array/#template_6","title":"Template","text":"<p>\u901a\u5e38\u662f\u4e00\u7ef4\u6570\u7ec4\uff0c\u8981\u5bfb\u627e\u4efb\u4e00\u4e2a\u5143\u7d20\u7684\u53f3\u8fb9\u6216\u8005\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6bd4\u81ea\u5df1\u5927\u6216\u8005\u5c0f\u7684\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u6b64\u65f6\u53ef\u4ee5\u7528\u5355\u8c03\u6808</p> <pre><code>for i in range(len(nums)):\n    if not Q or nums[Q[-1]] &gt;= nums[i]:\n        Q.append(i)\n    else:\n        while Q and nums[Q[-1]] &lt; num2[i]:\n            next_greater[Q[-1]] = i\n            Q.pop()\n        Q.append(i)\n</code></pre> <pre><code>stack&lt;int&gt; stack;  // a decreasing stack\n\nfor (int i = 0; i &lt; temperatures.size(); ++i) {\n    while (!stack.empty() &amp;&amp; temperatures[stack.top()] &lt; temperatures[i]) {\n        const int index = stack.top();\n        stack.pop();\n        ans[index] = i - index;\n    }\n    stack.push(i);\n}\n</code></pre> <p>\u6709\u8bb8\u591a\u9ad8\u5ea6\uff0c\u6c42\u6700\u5927\u9762\u79ef</p> <pre><code>for i in range(len(height)):\n    if not Q or height[Q[-1]] &gt; height[i]:\n        Q.append(i)\n    elif height[Q[-1]] == height[i]:\n        Q.pop()\n        Q.append(i)\n    else:\n        while Q and height[i] &gt; height[Q[-1]]:\n            bottom = height[Q[-1]]; Q.pop()\n            if Q:\n                h = min(height[Q[-1]], height[i]) - bottom\n                w = i - Q[-1] - 1\n                ans += h * w\n        Q.append(i)\n</code></pre>"},{"location":"array/#what-i-have-done_7","title":"What I have done","text":"<p>42. Trapping Rain Water 84. Largest Rectangle in Histogram 456. 132 Pattern 496. Next Greater Element I 503. Next Greater Element II 556. Next Greater Element III\u8003\u8651\u5168\u9762 739. Daily Temperatures </p> <p>\u4e5f\u6709\u7b80\u5355\u7684\u4e0d\u7528priority queue\u7684 11. Container with Most Water</p>"},{"location":"array/#boyer-moore-voting-algorithm","title":"Boyer-Moore Voting Algorithm","text":""},{"location":"array/#template_7","title":"Template","text":"<p>\u591a\u6570\u5143\u7d20: \u4e25\u683c\u8d85\u8fc7\u4e00\u534a 1.  \u5019\u9009\u9636\u6bb5\uff1a\u627e\u5230\u4e00\u4e2a\u53ef\u80fd\u662f\u591a\u6570\u5143\u7d20\u7684\u5019\u9009\u8005 2.  \u9a8c\u8bc1\u9636\u6bb5\uff1a\u68c0\u67e5\u8be5\u5019\u9009\u8005\u662f\u5426\u771f\u7684\u4e3a\u591a\u6570\u5143\u7d20</p> <pre><code>def majority_element(nums):\n# Step 1: Find the candidate\ncandidate = None\ncount = 0\nfor num in nums:\n    if count == 0:  # Reset candidate\n        candidate = num\n    count += 1 if num == candidate else -1\n\n# Step 2: Verify the candidate\ncount = 0\nfor num in nums:\n    if num == candidate:\n        count += 1\n\n# Check if the candidate is actually the majority element\nif count &gt; len(nums) // 2:\n    return candidate\nelse:\n    return None\n</code></pre>"},{"location":"array/#what-i-have-done_8","title":"What I have done","text":"<p>229. Majority Element II </p>"},{"location":"array/#segment-tree","title":"Segment Tree","text":""},{"location":"array/#template_8","title":"Template","text":"<pre><code>class NumArray:\n\n    def __init__(self, nums: List[int]):\n        self.n = len(nums)\n        self.tree = [0] * self.n + nums\n        for i in range(self.n, 0, -1): # \u4e0d\u8ba1\u7b970\n            self.tree[i] = self.tree[i &lt;&lt; 1] + self.tree[i &lt;&lt; 1 | 1]\n\n    def update(self, i: int, val: int) -&gt; None:\n        i += self.n\n        self.tree[i] = val\n        while i &gt; 0:\n            self.tree[i &gt;&gt; 1] = self.tree[i] + self.tree[i ^ 1]\n            i &gt;&gt;= 1\n\n    def sumRange(self, i: int, j: int) -&gt; int:\n        i += self.n\n        j += self.n + 1 # [i, j)\n        result = 0\n        while i &lt; j:\n            if i &amp; 1: # \u5f53\u524d\u8282\u70b9\u662f\u4e00\u4e2a\u5b8c\u6574\u533a\u95f4\n                result += self.tree[i]\n                i += 1\n            if j &amp; 1:\n                j -= 1\n                result += self.tree[j]\n            i &gt;&gt;= 1\n            j &gt;&gt;= 1\n        return result\n</code></pre>"},{"location":"array/#what-i-have-done_9","title":"What I have done","text":""},{"location":"array/#inversions","title":"Inversions","text":"<p>307. Range Sum Query - Mutable 493. Reverse Pairs </p>"},{"location":"array/#step","title":"Step\ud83c\udf1f","text":""},{"location":"array/#what-i-have-done_10","title":"What I have done","text":"<p>390. Elimination Game </p>"},{"location":"bfs/","title":"BFS","text":""},{"location":"bfs/#2-d","title":"2-D","text":""},{"location":"bfs/#template","title":"Template","text":"<ul> <li>0-1 matrix</li> <li>\u6700\u77ed\u8def</li> <li>\u957f\u5ea6 &gt;= 100 (\u7528dfs\u4f1a\u8d85\u65f6)</li> </ul> <p>DFS: * \u627e\u5230\u4e00\u6761\u8def\u5f84\u5c31\u53ef\u4ee5\u8fd4\u56de</p> <pre><code>directions = [(0,1), (0,-1), (-1,-1), (-1,0), (-1,1), (1,-1), (1,0), (1,1)]\nQ = deque([(0, 0)])\nans = 1\ngrid[0][0] = 1\nwhile Q:\n    for _ in range(len(Q)):\n        x, y = Q.popleft()\n        if x == n - 1 and y == n - 1:\n            return ans\n        for dir in directions:\n            x_new = x + dir[0]\n            y_new = y + dir[1]\n            if 0&lt;=x_new&lt;n and 0&lt;=y_new&lt;n and grid[x_new][y_new] == 0:\n                grid[x_new][y_new] = 1\n                Q.append((x_new, y_new))\n    ans += 1\n</code></pre> <p>\u8bb0\u5f55\u5c42\u6570</p> <pre><code>while Q:\n    layer_num = len(Q)\n    for i in range(layer_num):\n        x, y = Q.popleft()\n        for x_d, y_d in dirs:\n            x_n = x + x_d\n            y_n = y + y_d\n            if x_n &lt; 0 or x_n &gt;= m or y_n &lt; 0 or y_n &gt;= n:\n                continue\n            if grid[x_n][y_n] == 1:\n                grid[x_n][y_n] = 2\n                fresh_changes_cnt += 1\n                Q.append((x_n, y_n))\n</code></pre>"},{"location":"bfs/#what-i-have-done","title":"What I have done","text":"<p>542. 01 Matrix 994. Rotting Oranges 1091. Shortest Path in Binary Matrix </p>"},{"location":"dfs/","title":"DFS","text":""},{"location":"dfs/#basic","title":"Basic","text":"<ul> <li>python\u90fd\u662f\u5f15\u7528\u4f20\u9012<ul> <li>\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff08\u5982 int\u3001float\u3001str\u3001tuple\uff09\u4f1a\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u5bf9\u8c61</li> <li>\u53ef\u53d8\u5bf9\u8c61\uff08\u5982 list\u3001dict\u3001set\uff09\u662f\u5f15\u7528\u4f20\u9012\uff0c\u5728\u539f\u6765\u7684\u5bf9\u8c61\u4e0a\u76f4\u63a5\u4fee\u6539<ul> <li>\u4e0d\u80fd\u8fd9\u6837\u5199\uff1adfs(node.right, path.append(str(node.val)))\uff0c\u56e0\u4e3a\u8fd4\u56de\u503c\u662fNoneType\uff0c\u5fc5\u987b\u5148append\u518dpop</li> </ul> </li> </ul> </li> <li>C++<ul> <li>\u503c\u4f20\u9012\uff1a<code>void function_name(type param);</code></li> <li>\u5f15\u7528\u4f20\u9012\uff1a <code>void function_name(type&amp; param);</code></li> <li>\u6309\u5e38\u91cf\u5f15\u7528\u4f20\u9012: \u4f20\u9012\u7684\u662f\u539f\u59cb\u53d8\u91cf\u7684\u5f15\u7528\uff0c\u4f46\u4e0d\u80fd\u4fee\u6539\u539f\u59cb\u53d8\u91cf <code>void function_name(const type&amp; param);</code></li> </ul> </li> </ul>"},{"location":"dfs/#1-d-dfs","title":"1-D DFS","text":""},{"location":"dfs/#template","title":"Template","text":"<pre><code>ans = []\ndef dfs(idx, sum, lst):\n    if idx &gt;= len(candidates):\n        return\n    if sum + candidates[idx] == target:\n        lst.append(candidates[idx])\n        ans.append(lst)\n    elif sum + candidates[idx] &lt; target:\n        dfs(idx + 1, sum, list(lst))\n        lst.append(candidates[idx])\n        dfs(idx, sum + candidates[idx], list(lst))\n        dfs(idx + 1, sum + candidates[idx], list(lst))\ncandidates = sorted(candidates)\ndfs(0, 0, [])\nreturn list(map(list, set(map(tuple, ans))))\n</code></pre> <pre><code>def dfs(idx, target):\n    if target == 0:\n        ans.append(tmp_ans[:]) # \u6d45copy\n        return\n    for i in range(idx, len(candidates)):\n        if i &gt; idx and candidates[i] == candidates[i-1]: # \u526a\u679d\n            continue\n        if candidates[i] &gt; target:\n            break\n        tmp_ans.append(candidates[i])\n        dfs(i + 1, target - candidates[i])\n        tmp_ans.pop()\n</code></pre>"},{"location":"dfs/#what-i-have-done","title":"What I have done","text":"<p>39. Combination Sum 40. Combination Sum II 216. Combination Sum III </p>"},{"location":"dfs/#1-d-partition","title":"1-D Partition","text":""},{"location":"dfs/#template_1","title":"Template","text":"<pre><code>def dfs(cur_idx):\n    if cur_idx == len(matchsticks):\n        if target_side == side_len[0] and side_len[0] == side_len[1] and side_len[1] == side_len[2] and side_len[2] == side_len[3]:\n            return True\n        return False\n\n    for i in range(4):\n        if i &gt; 0 and side_len[i] == side_len[i-1]:\n            continue\n        if side_len[i] + matchsticks[cur_idx] &lt;= target_side:\n            side_len[i] += matchsticks[cur_idx]\n            if dfs(cur_idx + 1):\n                return True\n            side_len[i] -= matchsticks[cur_idx]\n    return False\n</code></pre>"},{"location":"dfs/#what-i-have-done_1","title":"What I have done","text":"<p>473. Matchsticks to Square 698. Partition to K Equal Sum Subsets</p>"},{"location":"dfs/#2-d-dfs","title":"2-D DFS","text":""},{"location":"dfs/#template_2","title":"Template","text":"<pre><code>def dfs(row):\n    if row == n:\n        results.append(flag[:])\n        return\n    for i in range(n):\n        if judge(row, i) or row == 0:\n            flag[i] = row\n            dfs(row+1)\n            flag[i] = -1\n</code></pre>"},{"location":"dfs/#what-i-have-done_2","title":"What I have done","text":"<p>51. N-Queens 52. N-Queens II </p>"},{"location":"dfs/#template_3","title":"Template","text":"<pre><code>directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\ndef dfs(i, j):\n    for direct in directions:\n        x = i + direct[0]\n        y = j + direct[1]\n        if x &lt; 0 or y &lt; 0 or x &gt;= m or y &gt;= n or visited[x][y] == 1:\n            continue\n        visited[x][y] = 1\n</code></pre>"},{"location":"dfs/#what-i-have-done_3","title":"What I have done","text":"<p>200. Number of Islands </p>"},{"location":"dfs/#trie-xor","title":"Trie &amp; XOR","text":""},{"location":"dfs/#template_4","title":"Template","text":"<pre><code>class TrieNode:\n    def __init__(self):\n        # \u5b50\u8282\u70b9\uff08\u5b57\u5178\u5f62\u5f0f\u5b58\u50a8\uff0c\u952e\u662f\u5b57\u7b26\uff0c\u503c\u662f\u5bf9\u5e94\u7684\u5b50\u8282\u70b9\uff09\n        self.children = {}\n        # \u662f\u5426\u662f\u5355\u8bcd\u7ed3\u5c3e\n        self.is_word = False\n\n\nclass Trie:\n    def __init__(self):\n        # \u521d\u59cb\u5316\u6839\u8282\u70b9\n        self.root = TrieNode()\n\n    # \u63d2\u5165\u5355\u8bcd\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            # \u5982\u679c\u5b50\u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u65b0\u7684\u8282\u70b9\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]  # \u79fb\u52a8\u5230\u5b50\u8282\u70b9\n        node.is_word = True  # \u6807\u8bb0\u4e3a\u5355\u8bcd\u7ed3\u5c3e\n\n    # \u67e5\u627e\u5355\u8bcd\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:  # \u5b50\u8282\u70b9\u4e0d\u5b58\u5728\n                return False\n            node = node.children[char]\n        return node.is_word  # \u68c0\u67e5\u662f\u5426\u4e3a\u5355\u8bcd\u7ed3\u5c3e\n\n\n# \u6d4b\u8bd5\u5b57\u5178\u6811\nif __name__ == \"__main__\":\n    trie = Trie()\n    trie.insert(\"apple\")\n    print(\"Search 'apple':\", trie.search(\"apple\"))  # True\n</code></pre> <pre><code>struct TrieNode {\n    vector&lt;shared_ptr&lt;TrieNode&gt;&gt; children; // \u5b50\u8282\u70b9\u6570\u7ec4\n    bool isWord = false;                   // \u662f\u5426\u662f\u5355\u8bcd\u7ed3\u5c3e\n\n    TrieNode() : children(26) {}           // \u521d\u59cb\u5316\u5b50\u8282\u70b9\u6570\u7ec4\u5927\u5c0f\u4e3a 26\n};\n\nclass Trie {\nprivate:\n    shared_ptr&lt;TrieNode&gt; root; // \u6839\u8282\u70b9\n\npublic:\n    Trie() : root(make_shared&lt;TrieNode&gt;()) {} // \u521d\u59cb\u5316\u6839\u8282\u70b9\n\n    // \u63d2\u5165\u5355\u8bcd\n    void insert(const string&amp; word) {\n        auto node = root;\n        for (char c : word) {\n            int index = c - 'a'; // \u5b57\u6bcd\u5bf9\u5e94\u7684\u7d22\u5f15\n            if (!node-&gt;children[index]) { // \u5982\u679c\u5b50\u8282\u70b9\u4e3a\u7a7a\uff0c\u5219\u521b\u5efa\u65b0\u8282\u70b9\n                node-&gt;children[index] = make_shared&lt;TrieNode&gt;();\n            }\n            node = node-&gt;children[index]; // \u79fb\u52a8\u5230\u5b50\u8282\u70b9\n        }\n        node-&gt;isWord = true; // \u6807\u8bb0\u4e3a\u5355\u8bcd\u7ed3\u5c3e\n    }\n\n    // \u67e5\u627e\u5355\u8bcd\n    bool search(const string&amp; word) {\n        auto node = root;\n        for (char c : word) {\n            int index = c - 'a';\n            if (!node-&gt;children[index]) return false; // \u5b50\u8282\u70b9\u4e0d\u5b58\u5728\n            node = node-&gt;children[index];\n        }\n        return node-&gt;isWord; // \u68c0\u67e5\u662f\u5426\u4e3a\u5355\u8bcd\u7ed3\u5c3e\n    }\n};\n\nint main() {\n    Trie trie;\n    trie.insert(\"apple\");\n\n    cout &lt;&lt; \"Search 'apple': \" &lt;&lt; trie.search(\"apple\") &lt;&lt; endl; // true\n    return 0;\n}\n</code></pre>"},{"location":"dfs/#what-i-have-done_4","title":"What I have done","text":"<p>208. Implement Trie (Prefix Tree) 211. Design Add and Search Words Data Structure 421. Maximum XOR of Two Numbers in an Array 2935. Maximum Strong Pair XOR II </p>"},{"location":"dfs/#tree","title":"Tree","text":""},{"location":"dfs/#what-i-have-done_5","title":"What I have done","text":"<p>112. Path Sum 113. Path Sum II 437. Path Sum III </p>"},{"location":"dp/","title":"DP","text":""},{"location":"dp/#two-list","title":"Two List","text":""},{"location":"dp/#template","title":"Template","text":"<pre><code>dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\nfor i in range(m):\n    for j in range(n):\n        dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])\n        if text1[i] == text2[j]:\n            dp[i+1][j+1] = max(dp[i+1][j+1], dp[i][j] + 1)\n</code></pre>"},{"location":"dp/#what-i-have-done","title":"What I have done","text":"<p>583. Delete Operation for Two Stringsconvert one string to another string, delete, insert, convert 1143. Longest Common Subsequence </p>"},{"location":"dp/#range-dp-palindromic-substring-sequence","title":"Range DP --&gt; Palindromic Substring / Sequence","text":""},{"location":"dp/#template_1","title":"Template","text":"<p>palindromic substring</p> <pre><code>for i in range(n):\n    dp[i][i] = 1\n    if i &gt; 0:\n        dp[i][i-1] = 1\nfor length in range(2, n + 1):\n    for i in range(0, n-length+1):\n        j = i + length - 1\n        if s[i] == s[j] and dp[i+1][j-1]:\n            dp[i][j] = 2 + dp[i+1][j-1]\n</code></pre> <p>palindromic sequence</p> <pre><code>for length in range(2, n + 1):\n    for i in range(0, n-length+1):\n        j = i + length - 1\n        if s[i] == s[j] and dp[i+1][j-1]:\n            dp[i][j] = 2 + dp[i+1][j-1]\n        else:\n            dp[i][j] = max(dp[i+1][j], dp[i][j-1]) # \u6700\u957f\u8fde\u7eed\u5b50\u4e32\u5c31\u6ca1\u6709\u8fd9\u91cc\n</code></pre>"},{"location":"dp/#what-i-have-done_1","title":"What I have done","text":"<p>5. Longest Palindromic Substring \ud83c\udf1f115. Distinct Subsequences 131. Palindrome Partitioning 516. Longest Palindromic Subsequence 647. Palindromic Substrings 718. Maximum Length of Repeated Subarray 1035. Uncrossed Lines 1312. Minimum Insertion Steps to Make a String</p>"},{"location":"dp/#tree-dp","title":"Tree DP","text":""},{"location":"dp/#template_2","title":"Template","text":"<pre><code>def dfs(node):\n    nonlocal ans\n    if not node:\n        return 2\n    left_state = dfs(node.left)\n    right_state = dfs(node.right)\n    if left_state == 0 or right_state == 0:\n        ans += 1\n        return 1\n    if left_state == 1 or right_state == 1:\n        return 2\n    return 0\n</code></pre>"},{"location":"dp/#what-i-have-done_2","title":"What I have done","text":"<p>337. House Robber III 968. Binary Tree Cameras</p>"},{"location":"dp/#alice-and-bob","title":"Alice and Bob","text":""},{"location":"dp/#template_3","title":"Template","text":"<p>1-D</p> <pre><code>for i in range(n-1, -1, -1):\n    for m in range(1, n+1):\n        if i + 2 * m &gt;= n:\n            dp[i][m] = suffix[i]\n        else:\n            for x in range(1, 2 * m + 1):\n                bob_score = dp[i+x][max(x, m)]\n                alice_score = suffix[i] - bob_score\n                dp[i][m] = max(dp[i][m], alice_score)\n</code></pre>"},{"location":"dp/#what-i-have-done_3","title":"What I have done","text":"<p>486. Predict the Winnerboth players are playing optimally?? 1140. Stone Game II </p>"},{"location":"dp/#knapsack-problem","title":"Knapsack Problem","text":""},{"location":"dp/#0-1-knapsack-problem","title":"0-1 Knapsack Problem","text":""},{"location":"dp/#template_4","title":"Template","text":"<p>recursive formula </p> <p>dp[j] \u8868\u793a\uff1a \u5bb9\u91cf\u4e3aj\u7684\u80cc\u5305\uff0c\u6240\u80cc\u7684\u7269\u54c1\u4ef7\u503c\u6700\u5927\u53ef\u4ee5\u4e3adp[j] dp[j] = max(dp[j], dp[j - weight[i]] + value[i])</p> <pre><code>for i in range(len(nums)):\n    for j in range(target, nums[i] - 1, -1):  # Iterate from target down to nums[i]\n        dp[j] = max(dp[j], dp[j - nums[i]] + nums[i])\n</code></pre>"},{"location":"dp/#what-i-have-done_4","title":"What I have done","text":"<p>416. Partition Equal Subset Sum 494. Target Sum\u65b9\u6848\u6570\u5c31\u662f+= 1049. Last Stone Weight II\u8f6c\u5316\u4e3a\u5c06\u4e00\u5806stone\u653e\u8fdb\u6700\u5927\u5bb9\u91cf\u4e3asum/2\u7684\u80cc\u5305,\u6c42\u653e\u8fdb\u53bb\u7684\u77f3\u5934\u7684\u6700\u5927\u91cd\u91cfMaxWeight,\u6700\u7ec8\u7b54\u6848\u5373\u4e3asum-2*MaxWeight 474. Ones and Zeroesweight\u53ef\u4ee5\u662f\u4e8c\u7ef4  </p>"},{"location":"dp/#unbounded-knapsack-problem","title":"Unbounded Knapsack Problem","text":""},{"location":"dp/#template_5","title":"Template","text":"<pre><code>for i in range(len(weight)):\n    for j in range(weight[i], bagWeight + 1): \n        dp[j] = max(dp[j], dp[j - weight[i]] + value[i])\n</code></pre> <p>\u7ec4\u5408\u6570</p> <pre><code>for i in range(len(coins)):\n    for j in range(coins[i], amount+1):\n        dp[j] += dp[j-coins[i]]\n</code></pre> <p>\u6392\u5217\u6570</p> <pre><code>for j in range(1, target+1):\n    for i in range(len(nums)):\n        if j &lt; nums[i]:\n            continue\n        dp[j] += dp[j-nums[i]]\n</code></pre>"},{"location":"dp/#what-i-have-done_5","title":"What I have done","text":"<p>279. Perfect Squares 377. Combination Sum IV\u6392\u5217 518. Coin Change II\u7ec4\u5408  </p>"},{"location":"dp/#other","title":"Other","text":""},{"location":"dp/#what-i-have-done_6","title":"What I have done","text":"<p>96. Unique Binary Search Trees 343. Integer Break</p>"},{"location":"dp/#house-robber","title":"House Robber","text":"<pre><code>dp[0] = nums[0]\ndp[1] = max(nums[0], nums[1])\nfor i in range(2, len(nums)):\n    dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n</code></pre> <p>198. House Robber 213. House Robber II</p>"},{"location":"dp/#best-time-to-buy-and-sell-stock","title":"Best Time to Buy and Sell Stock","text":""},{"location":"dp/#template_6","title":"Template","text":""},{"location":"dp/#what-i-have-done_7","title":"What I have done","text":"<p>121. Best Time to Buy and Sell Stock 122. Best Time to Buy and Sell Stock II 123. Best Time to Buy and Sell Stock III 188. Best Time to Buy and Sell Stock IV 309. Best Time to Buy and Sell Stock with Cooldown 714. Best Time to Buy and Sell Stock with Transaction</p>"},{"location":"dp/#math","title":"Math","text":""},{"location":"dp/#template_7","title":"Template","text":"<pre><code>nums = [1]\ni_2 = 0\ni_3 = 0\ni_5 = 0\nwhile len(nums) &lt; n:\n    nxt_2 = nums[i_2] * 2\n    nxt_3 = nums[i_3] * 3\n    nxt_5 = nums[i_5] * 5\n    nxt = min(nxt_2, nxt_3, nxt_5)\n    nums.append(nxt)\n    if nxt == nxt_2:\n        i_2 += 1\n    if nxt == nxt_3:\n        i_3 += 1\n    if nxt == nxt_5:\n        i_5 += 1\nreturn nums[n-1]\n</code></pre>"},{"location":"dp/#what-i-have-done_8","title":"What I have done","text":"<p>264. Ugly Number II 313. Super Ugly Number \ud83c\udf1f1201. Ugly Number III\u5bb9\u65a5+\u4e8c\u5206  </p>"},{"location":"dp/#what-i-have-done_9","title":"What I have done","text":"<p>467. Unique Substrings in Wraparound String </p>"},{"location":"graph/","title":"Graph","text":""},{"location":"graph/#topological-sorting","title":"Topological sorting","text":""},{"location":"graph/#template","title":"Template","text":"<p>\u5bf9\u4e8e\u56fe G \u4e2d\u7684\u4efb\u610f\u4e00\u6761\u6709\u5411\u8fb9 (u,v)\uff0cu \u5728\u6392\u5217\u4e2d\u90fd\u51fa\u73b0\u5728 v \u7684\u524d\u9762  </p> <ul> <li>\u6709\u73af\u5219\u6ca1\u6709\u62d3\u6251\u6392\u5e8f  </li> <li>\u62d3\u6251\u6392\u5e8f\u4e0d\u552f\u4e00 DFS</li> </ul> <pre><code>def dfs(x):\n    visited[x] = 1\n    for v in edges[x]:\n        if visited[v] == 0:\n            visited[v] = 1\n            if not dfs(v):\n                return False\n        elif visited[v] == 1:\n            return False\n    visited[x] = 2\n    topo.append(x)\n\nfor i in range(numCourses):\n    if valid and not visited[i]:\n        valid &amp;= dfs(i)\n\nif valid:\n    topo.reverse()\n    return topo\nreturn []\n</code></pre> <pre><code>class Solution {\npublic:\n    bool canFinish(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) {\n        vector&lt;vector&lt;int&gt;&gt; graph(numCourses);\n        vector&lt;int&gt; visited(numCourses, 0);\n\n        for (vector&lt;int&gt; prerequisite : prerequisites) {\n            graph[prerequisite[1]].push_back(prerequisite[0]);\n        }\n\n        for (int i = 0; i &lt; numCourses; ++i)\n            if (!hasCycle(graph, i, visited))\n                return false;\n        return true;\n  }\n\nprivate:\n    bool hasCycle(const vector&lt;vector&lt;int&gt;&gt;&amp; graph, int u, vector&lt;int&gt;&amp; visited) {\n        visited[u] = 1;\n        for (const int v : graph[u])\n            if (visited[v] == 0) {\n                visited[v] = 1;\n                if (!hasCycle(graph, v, visited)) return false;\n            }\n            else if (visited[v] == 1) return false;\n        visited[u] = 2;\n        return true;\n    }\n};\n</code></pre> <p>BFS</p> <pre><code>Q = deque()\nfor i in range(1, n+1):\n    if ind[i] == 0:\n        Q.append(i)\nwhile Q:\n    u = Q.popleft()\n    topo.append(u)\n    for v in graph[u]:\n        ind[v] -= 1\n        if ind[v] == 0:\n            Q.append(v)\n</code></pre>"},{"location":"graph/#what-i-have-done","title":"What I have done","text":"<p>207. Course Schedule 210. Course Schedule II 1462. Course Schedule IV 2192. All Ancestors of a Node in a Directed Acyclic Graph 2392. Build a Matrix With Conditions </p>"},{"location":"graph/#has-cycle","title":"Has Cycle","text":""},{"location":"graph/#template_1","title":"Template","text":"<p>two pointer space complexity -&gt; O(1)</p> <pre><code>while True:\n    slow = next_index(slow)\n    fast = next_index(fast)\n    if nums[fast] * nums[i] &lt;= 0 or nums[next_index(fast)] * nums[i] &lt;= 0:\n        break\n    fast = next_index(fast)\n    if slow == fast:\n        if slow == next_index(slow): \n            break\n        return True\n</code></pre>"},{"location":"graph/#what-i-have-done_1","title":"What I have done","text":"<p>457. Circular Array Loop\ud83c\udf1f 802. Find Eventual Safe States 1591. Strange Printer II\ud83c\udf1f 2115. Find All Possible Recipes from Given Supplies </p>"},{"location":"graph/#union-find","title":"Union-Find","text":""},{"location":"graph/#template_2","title":"Template","text":"<p>\u7b80\u6613\u7248</p> <pre><code>def find(x):\n    if p[x] != x:\n        p[x] = find(p[x])\n    return p[x]\n</code></pre> <p>\u5b8c\u6574\u7248\uff08\u6309\u79e9\uff09</p> <pre><code>class UnionFind:\n    def __init__(self, size):\n        self.parent = list(range(size))  \n        self.rank = [1] * size  # height\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x]) \n        return self.parent[x]\n\n    def union(self, x, y):\n        rootX = self.find(x)\n        rootY = self.find(y)\n        if rootX != rootY:\n            if self.rank[rootX] &gt; self.rank[rootY]:\n                self.parent[rootY] = rootX\n            elif self.rank[rootX] &lt; self.rank[rootY]:\n                self.parent[rootX] = rootY\n            else:\n                self.parent[rootY] = rootX\n                self.rank[rootX] += 1\n</code></pre>"},{"location":"graph/#what-i-have-done_2","title":"What I have done","text":"<p>547. Number of Provinces 684. Redundant Connection 685. Redundant Connection II 947. Most Stones Removed with Same Row or 990. Satisfiability of Equality Equations </p>"},{"location":"graph/#shortest-path","title":"Shortest Path","text":""},{"location":"graph/#template_3","title":"Template","text":"<p>Dijkstra</p> <pre><code>while Q:\n    u = Q.popleft()\n    for v in graph[u]:\n        dist[v] = max(dist[v], dist[u] + time[v])\n        ind[v] -= 1\n        if ind[v] == 0:\n            Q.append(v)\n</code></pre> <p>Dijkstra with heap</p> <pre><code>def Dijkstra(self, graph, src):\n    dis = [float('inf')] * len(graph)\n    dis[src] = 0\n    minHeap = [(dis[src], src)]\n\n    while minHeap:\n        d, u = heapq.heappop(minHeap)\n        if d &gt; dis[u]:\n            continue\n        for v, w in graph[u]:\n            if d + w &lt; dis[v]:\n                dis[v] = d + w\n                heapq.heappush(minHeap, (dis[v], v))\n</code></pre>"},{"location":"graph/#what-i-have-done_3","title":"What I have done","text":"<p>797. All Paths From Source to Target 1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance 1514. Path with Maximum Probability 1631. Path With Minimum Effort\u53d8\u4e00\u4e0b 2050. Parallel Courses III </p>"},{"location":"graph/#bfs-variants","title":"BFS Variants","text":""},{"location":"graph/#what-i-have-done_4","title":"What I have done","text":"<p>310. Minimum Height Trees </p>"},{"location":"graph/#tarjan","title":"Tarjan","text":""},{"location":"graph/#template_4","title":"Template","text":"<p>find cut vertex</p> <pre><code>dfn = [0] * n\nlow = [0] * n\nans = []\ncur_time = 0\n\ndef tarjan(node, parent):\n    nonlocal cur_time\n    cur_time += 1\n    dfn[node] = low[node] = cur_time\n    for neighbor in graph[node]:\n        if neighbor == parent:\n            continue\n        if not dfn[neighbor]:\n            tarjan(neighbor, node)\n            low[node] = min(low[node], low[neighbor])\n            if low[neighbor] &gt; dfn[node]:\n                ans.append([node, neighbor])\n            low[node] = min(low[node], dfn[neighbor])\n\ngraph = [[] for _ in range(n)]\nfor a, b in connections:\n    graph[a].append(b)\n    graph[b].append(a)\ntarjan(0, -1)\nreturn ans  \n</code></pre>"},{"location":"graph/#what-i-have-done_5","title":"What I have done","text":"<p>1192. Critical Connections in a Network </p>"},{"location":"graph/#mst","title":"MST","text":""},{"location":"graph/#template_5","title":"Template","text":"<p>Kruskal</p> <pre><code>def find(self, parent, node):\n    if parent[node] == node:\n        return node\n    parent[node] = self.find(parent, parent[node])\n    return parent[node]\n\ndef union(self, parent, rank, x, y):\n    root_x = self.find(parent, x)\n    root_y = self.find(parent, y)\n\n    if root_x != root_y:\n        if rank[root_x] &lt; rank[root_y]:\n            parent[root_x] = root_y\n        elif rank[root_x] &gt; rank[root_y]:\n            parent[root_y] = root_x\n        else:\n            parent[root_y] = root_x\n            rank[root_x] += 1\n\nedges = sorted(edges)\n\nparent = list(range(len(points)))\nrank = [0] * len(points)\nmin_cost = 0\n\nfor edge in edges:\n    distance, u, v = edge\n    if self.find(parent, u) != self.find(parent, v):\n        min_cost += distance\n        self.union(parent, rank, u, v)\n</code></pre>"},{"location":"graph/#what-i-have-done_6","title":"What I have done","text":"<p>1584. Min Cost to Connect All Points</p>"},{"location":"greedy/","title":"Greedy","text":"<p>\u8bc1\u660e\u6b63\u786e\u6027 compare with DP</p>"},{"location":"greedy/#what-i-have-done","title":"What I have done","text":"<p>\u5173\u4e8e\u6570\u5b57 final right and larger position 31. Next Permutation 670. Maximum Swap </p> <p>45. Jump Game II 53. Maximum Subarray 55. Jump Game 56. Merge Intervals 122. Best Time to Buy and Sell Stock II 134. Gas Station \u770b\u56fe\u60f3 \uff5c \u73af\u5f62\u53d6\u6a21 135. Candy 376. Wiggle Subsequence 406. Queue Reconstruction by Height 435. Non-overlapping Intervals 452. Minimum Number of Arrows to Burst Ballo 455. Assign Cookies 763. Partition Labels 860. Lemonade Changes 968. Binary Tree Cameras \u6811\u4e0a\u8d2a\u5fc3   1005. Maximize Sum Of Array After K Negations </p>"},{"location":"linkedlist/","title":"LinkedList","text":""},{"location":"linkedlist/#basis","title":"Basis","text":"<pre><code> class ListNode(object):\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n</code></pre> <pre><code>struct ListNode {\n    int val;\n    ListNode* next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int val) : val(val), next(nullptr) {}\n    ListNode(int val, ListNode* next) : val(val), next(next) {}\n};\n</code></pre> <ul> <li>head = [ ]</li> <li>only 1 item</li> <li>odd and even</li> </ul>"},{"location":"linkedlist/#fast-slow-pointer","title":"Fast &amp; Slow Pointer","text":""},{"location":"linkedlist/#template","title":"Template","text":"<p>\u7528\u6765\u627e\u4e2d\u70b9\u548c\u73af</p> <pre><code>fast = slow = head\nwhile fast and fast.next:\n    fast = fast.next.next\n    slow = slow.next\nreturn slow\n</code></pre> <p><code>* -&gt; (*) -&gt; *   or   * -&gt; * -&gt; (*) -&gt; *</code></p>"},{"location":"linkedlist/#what-i-have-done","title":"What I have done","text":"<p>19. Remove Nth Node From End of List 24. Swap Nodes in Pairs </p>"},{"location":"linkedlist/#template_1","title":"Template","text":"<p>\u627e\u73af\u7684\u8d77\u59cb\u70b9</p> <pre><code>fast = slow = head\nwhile fast and fast.next:\n    fast = fast.next.next\n    slow = slow.next\n    if fast == slow:\n        slow = head\n        while slow != fast:\n            slow = slow.next\n            fast = fast.next\n        return slow\n</code></pre>"},{"location":"linkedlist/#what-i-have-done_1","title":"What I have done","text":"<p>142. Linked List Cycle II \ud83c\udf1f287. Find the Duplicate Number\u8f6c\u5316\u4e3alinkedlist  </p>"},{"location":"linkedlist/#dummy-head","title":"Dummy Head","text":""},{"location":"linkedlist/#template_2","title":"Template","text":"<pre><code>dummy_head = ListNode(next=head)\ncurrent = dummy_head\nwhile current.next:\n\nreturn dummy_head.next\n</code></pre>"},{"location":"linkedlist/#what-i-have-done_2","title":"What I have done","text":"<p>21. Merge Two Sorted List 203. Remove Linked List Elements</p>"},{"location":"linkedlist/#reverse-linkedlist","title":"Reverse LinkedList","text":""},{"location":"linkedlist/#template_3","title":"Template","text":"<p>reverse nodes between [start + 1, end - 1], return node on (end - 1) </p> <pre><code>def reversek(self, start, end):\n    pre, cur = start, start.next\n    first = cur\n    while cur != end:\n        nxt = cur.next\n        cur.next = pre\n        pre = cur\n        cur = nxt\n    start.next = pre\n    first.next = cur\n    return start\n</code></pre>"},{"location":"linkedlist/#what-i-have-done_3","title":"What I have done","text":"<p>25. Reverse Nodes in k-Group 206. Reverse Linked List</p>"},{"location":"linkedlist/#merge-linkedlist","title":"Merge LinkedList","text":""},{"location":"linkedlist/#template_4","title":"Template","text":"<pre><code>def merge(list1, list2):\n    while list2 and list2.next:\n        next = list1.next\n        list1.next = list2\n        list1 = list2\n        list2 = next\n</code></pre>"},{"location":"linkedlist/#what-i-have-done_4","title":"What I have done","text":"<p>143. Reordered List</p>"},{"location":"linkedlist/#palindrome-linked-list","title":"Palindrome Linked List","text":""},{"location":"linkedlist/#what-i-have-done_5","title":"What I have done","text":"<p>234. Palindrome Linked List</p>"},{"location":"linkedlist/#other","title":"Other","text":""},{"location":"linkedlist/#what-i-have-done_6","title":"What I have done","text":"<p>23. Merge k Sorted Lists LinkedList + Heap 141. Linked List Cycle 206. Reverse Linked List 445. Add Two Numbers II 707. Design Linked List</p>"},{"location":"math/","title":"Math","text":""},{"location":"math/#bitwise-operations","title":"bitwise operations","text":"<ul> <li>0xffffffff</li> <li>0x7fffffff 0 + 31\u4e2a1\uff0c\u662f 32 \u4f4d\u6574\u6570\u7684\u6700\u5927\u6b63\u6570  2^{31} - 1 \uff0c\u5373\u6700\u9ad8\u4f4d\uff08\u7b2c 31 \u4f4d\uff09\u4e3a 0\uff0c\u5176\u4ed6\u4f4d\u5168\u4e3a 1\u3002</li> <li>0x7ffffffff  32\u4e2a1\uff0c 2^{32}-1</li> <li>\u8d1f\u6570\u4ee5\u8865\u7801\u5f62\u5f0f\u50a8\u5b58\uff0c\u53d6\u53cd\u518d\u52a0\u4e00  -&gt;  -x = ~x + 1<ul> <li>\u539f\u7801 &lt;-&gt; \u8865\u7801 \u90fd\u662f\u6570\u5b57\u4f4d\u53d6\u53cd\u52a0\u4e00</li> <li>\u6b63\u6570 3 \u7684\u4e8c\u8fdb\u5236\u8868\u793a: 00000000 00000000 00000000 00000011</li> <li>\u53d6\u53cd             : 11111111 11111111 11111111 11111100</li> <li>\u8d1f\u6570 3 \u7684\u4e8c\u8fdb\u5236\u8868\u793a: 11111111 11111111 11111111 11111101</li> </ul> </li> <li>x &amp; -x \u53ea\u6709\u6700\u53f3\u8fb9\u662f1\u7684\u90a3\u4e00\u4f4d\u67091\uff0c\u5176\u4f59\u90fd\u662f0</li> <li>C++\u4e2d, \u5bf9-2147483648\u53d6\u53cd\u8981\u7528unsigned int<ul> <li>unsigned int: 0 \u5230 2^32 - 1</li> <li>int: -2^31 \u5230 2^31 - 1</li> </ul> </li> <li>\u5404\u4e2a\u8fdb\u5236\u5f00\u5934<ul> <li>0b\u8868\u793a\u4e8c\u8fdb\u5236 0b10 -&gt; \u5341\u8fdb\u5236\u76842</li> <li>ox\u8868\u793a16\u8fdb\u5236 0x1A -&gt; \u5341\u8fdb\u5236\u768426</li> </ul> </li> </ul>"},{"location":"math/#template","title":"Template","text":"<pre><code># int\u548c\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u8f6c\u6362\nint range [-2^31, 2^31-1]\ns = bin(n)[2:]\nint(s, 2)\n</code></pre>"},{"location":"math/#what-i-have-done","title":"What I have done","text":"<p>\ud83c\udf1f89. Gray Code\u627e\u89c4\u5f8b  </p>"},{"location":"math/#template_1","title":"Template","text":"<pre><code>x = 0xffffffff # 32\u4e2a1\uff0c 2^32-1\na = a &amp; x # Python \u7684\u6574\u6570\u6ca1\u6709\u56fa\u5b9a\u4f4d\u6570\uff08\u7406\u8bba\u4e0a\u53ef\u4ee5\u65e0\u9650\u5927\uff09\u3002\nb = b &amp; x # \u5c06\u9ad8\u4e8e32\u4f4d\u6e05\u96f6, \u5982\u679c\u8f93\u5165\u7684 a \u548c b \u662f\u8d1f\u6570\uff0c\u8f6c\u6362\u6210 32 \u4f4d\u8865\u7801 \u8868\u793a\u3002\nwhile b != 0:\n    # 1. \u8ba1\u7b97\u65e0\u8fdb\u4f4d\u52a0\u6cd5\uff08\u5f02\u6216\uff09\n    temp_a = a ^ b\n    # 2. \u8ba1\u7b97\u8fdb\u4f4d\u4fe1\u606f\uff08\u6309\u4f4d\u4e0e\u540e\u5de6\u79fb\u4e00\u4f4d\uff09\n    temp_b = (a &amp; b) &lt;&lt; 1\n    # 3. \u5c06\u8fdb\u4f4d\u7ed3\u679c\u9650\u5236\u5728 32 \u4f4d\u8303\u56f4\u5185\n    temp_b = temp_b &amp; 0xffffffff\n    # 4. \u66f4\u65b0 a \u548c b\n    a = temp_a\n    b = temp_b\n\nif a &lt;= 0x7fffffff: # a\u662f\u6b63\u6570\n    return a\nelse:\n    return ~(a^x) # \u5c06\u8865\u7801\u6062\u590d\u4e3a\u5341\u8fdb\u5236\u8d1f\u6570\n</code></pre>"},{"location":"math/#what-i-have-done_1","title":"What I have done","text":"<p>371. Sum of Two Integers </p>"},{"location":"math/#template_2","title":"Template","text":"<pre><code>class Solution:\n    def singleNumber(self, nums: List[int]) -&gt; int:\n        ans = 0\n        for i in range(31):\n            cnt1 = sum(x &gt;&gt; i &amp; 1 for x in nums)\n            ans |= cnt1 % 3 &lt;&lt; i\n        # \u6700\u9ad8\u4f4d\u662f\u7b26\u53f7\u4f4d\uff0c\u4e0b\u9762\u8fd9\u884c\u76f8\u5f53\u4e8e\u7edf\u8ba1\u8d1f\u6570\u7684\u4e2a\u6570\n        cnt1 = sum(x &gt;&gt; 31 &amp; 1 for x in nums)\n        # \u5982\u679c cnt1 % 3 == 1\uff0c\u90a3\u4e48\u7b54\u6848\u7684\u6700\u9ad8\u4f4d\u662f 1\uff0c\u5426\u5219\u662f 0\n        # Python \u53ea\u80fd\u901a\u8fc7\u51cf\u6cd5\u628a\u6700\u9ad8\u4f4d\u7f6e\u4e3a 1\n        return ans - (cnt1 % 3 &lt;&lt; 31)\n</code></pre>"},{"location":"math/#what-i-have-done_2","title":"What I have done","text":"<p>136. Single Number \ud83c\udf1f137. Single Number II \ud83c\udf1f260. Single Number III </p>"},{"location":"math/#template_3","title":"Template","text":"<pre><code>bin(i).count('1') # Hamming weight or population count\nnum.bit_length() # \u4e8c\u8fdb\u5236\u6570\u957f\u5ea6\n</code></pre> <p>476. Number Complement 477. Total Hamming Distance\u6309\u4f4d\u5904\u7406  </p>"},{"location":"math/#what-i-have-done_3","title":"What I have done","text":"<p>190. Reverse Bits 191. Number of 1 Bits 268. Missing Number 338. Counting Bits 384. Shuffle an Array 470. Implement Rand10() Using Rand7()\u6982\u7387\u5e73\u5747 --&gt; \u62d2\u7edd\u91c7\u6837  </p>"},{"location":"math/#mathematical-theorem","title":"Mathematical theorem","text":""},{"location":"math/#what-i-have-done_4","title":"What I have done","text":"<ul> <li>\u4e2d\u4f4d\u6570\u80fd\u591f\u6700\u5c0f\u5316\u7edd\u5bf9\u5dee\u7684\u548c  462. Minimum Moves to Equal Array Elements II </li> </ul>"},{"location":"math/#_1","title":"\u53d6\u6574","text":"<ul> <li>\u5411\u4e0b\u53d6\u6574<ul> <li>python: <code>result = math.floor(num)</code></li> <li>c++: <code>int result = floor(num);</code></li> </ul> </li> <li>\u5411\u4e0a\u53d6\u6574<ul> <li>python: <code>result = math.ceil(num)</code></li> <li>c++: <code>int result = ceil(num);</code></li> </ul> </li> <li>\u56db\u820d\u4e94\u5165\u53d6\u6574<ul> <li>python: <code>result = round(num)</code>, <code>result = round(num, 2)</code> \u4fdd\u7559\u4e24\u4f4d</li> <li>c++: <code>int result = std::round(num);</code>, <code>double result = std::round(num * 100) / 100;</code> \u4fdd\u7559\u4e24\u4f4d</li> </ul> </li> </ul>"},{"location":"math/#_2","title":"\u8fd0\u7b97","text":""},{"location":"math/#c","title":"c++","text":"<ul> <li><code>double result = sqrt(25.0); // result = 5.0</code></li> <li><code>result = pow(2.0, 3.0); // result = 8.0 (2^3)</code></li> <li><code>double result = log(2.718281828459); // result \u2248 1.0</code></li> <li><code>double result = log10(100.0); // result = 2.0</code></li> <li><code>double result = sin(3.141592653589 / 2); // result \u2248 1.0</code></li> <li><code>double result = abs(-5.0); // result = 5.0</code></li> <li><code>double maxVal = fmax(3.5, 4.5); // maxVal = 4.5</code></li> </ul>"},{"location":"simulation/","title":"Simulation","text":""},{"location":"simulation/#number-calculation","title":"Number &amp; Calculation","text":"<ul> <li>\u6570\u5b57\uff1a<ul> <li>\u957f\u5ea6\u53d8\u5316\uff1a\u8fdb\u4f4d\uff0c \u501f1</li> </ul> </li> <li>\u8fd0\u7b97\uff1a<ul> <li>\u4f18\u5148\u7ea7</li> <li>\u4ece\u5de6\u5230\u53f3</li> </ul> </li> </ul>"},{"location":"simulation/#what-i-have-done","title":"What I have done","text":"<p>227. Basic Calculator II 738. Monotone Increasing Digits</p>"},{"location":"simulation/#else","title":"Else","text":""},{"location":"simulation/#what-i-have-done_1","title":"What I have done","text":"<p>54. Spiral Matrix 59. Spiral Matrix II </p>"},{"location":"simulation/#random","title":"Random","text":""},{"location":"simulation/#template","title":"Template","text":"<pre><code>random.randrange(start, stop[, step])\nrandom.randint(1, stop)\n</code></pre> <pre><code>random.uniform(0, 1) # \u751f\u6210\u4e00\u4e2a\u5728 [0, 1) \u533a\u95f4\u7684\u5747\u5300\u968f\u673a\u6d6e\u70b9\u6570\u3002\nmath.sqrt(random.uniform(0, 1)) # \u5bf9\u751f\u6210\u7684\u968f\u673a\u6570\u6c42\u5e73\u65b9\u6839\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u5728\u5706\u5185\u751f\u6210\u70b9\u65f6\u4fdd\u8bc1\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6982\u7387\u5206\u5e03\u662f\u5747\u5300\u7684\n# \u82e5\u76f4\u63a5\u4f7f\u7528\u968f\u673a\u6570\u7684\u6bd4\u4f8b\uff0c\u4f1a\u5bfc\u81f4\u751f\u6210\u7684\u70b9\u96c6\u4e2d\u5728\u5706\u5fc3\u9644\u8fd1\uff0c\u56e0\u4e3a\u9762\u79ef\u5bc6\u5ea6\u548c\u534a\u5f84\u6210\u5e73\u65b9\u5173\u7cfb\u3002\u5e73\u65b9\u6839\u4fee\u6b63\u53ef\u4ee5\u5e73\u8861\u5206\u5e03\n</code></pre>"},{"location":"simulation/#what-i-have-done_2","title":"What I have done","text":"<p>497.Random Point in Non-overlapping Rectangles </p>"},{"location":"simulation/#read-data-ood","title":"Read Data / OOD","text":""},{"location":"simulation/#what-i-have-done_3","title":"What I have done","text":"<p>355. Design Twitter </p>"},{"location":"string/","title":"String","text":""},{"location":"string/#about-string","title":"About string","text":"<ul> <li>convert char to number <code>rec[ord(s[left]) - ord('A')]</code></li> <li><code>sorted(string)</code> get a list of char</li> <li>s[::-1] reverse the string, but time complexity is O(n)</li> <li>\u957f\u5ea6\u4e3an\u7684\u5b57\u7b26\u4e32\uff0c\u5b50\u4e32\u6570\u91cf\u662f n * (n + 1) / 2</li> <li>C++<ul> <li>string / char merge: <ul> <li>\u4e24\u4e2astring: <code>string merged = str1 + str2</code> or <code>str1.push_back(str2)</code></li> <li>string + char: <code>str.push_back(c)</code></li> <li>\u4e24\u4e2achar -&gt; \u8f6c\u5316\u4e3a\u4e24\u4e2a\u6216\u4e00\u4e2astring</li> </ul> </li> <li>char -&gt; string: <code>string s(1, c); merged += c2 // \u7528 c1 \u521d\u59cb\u5316\u4e00\u4e2a\u957f\u5ea6\u4e3a 1 \u7684\u5b57\u7b26\u4e32 merged</code></li> <li>int -&gt; string: <code>str = to_string(num);</code></li> <li>0 -&gt; 'A': <code>string(1, 'A' + 0)</code></li> <li>string -&gt; int: <code>num = stoi(str);</code>  \"123\" -&gt; 123</li> <li>char -&gt; int: <code>(int)c</code>; \u5224\u65adchar\u662f\u5426\u662f\u6570\u5b57: <code>if (isdigit(c))</code></li> <li>int -&gt; char: <code>(char)num</code> eg. char(65) -&gt; 'A'</li> <li>vector -&gt; string:<ul> <li><code>vector&lt;char&gt; s = {'H', 'e', 'l', 'l', 'o'}; string result(s.begin(), s.end());</code></li> <li><code>vector&lt;string&gt; s = {\"Hello\", \" \", \"World\"}; string result = accumulate(s.begin(), s.end(), string());</code></li> </ul> <li>reverse: <code>reverse(str.begin(), str.end());</code></li>"},{"location":"string/#what-i-have-done","title":"What I have done","text":"<p>5. Longest Palindromic Substring 49. Group Anagrams 467. Unique Substrings in Wraparound String </p>"},{"location":"string/#template","title":"Template","text":"<pre><code>for token in input.split('\\n'):\n    depth = token.count('\\t')\n    token = token.replace('\\t', '')\n</code></pre>"},{"location":"string/#what-i-have-done_1","title":"What I have done","text":"<p>388. Longest Absolute File Path </p>"},{"location":"string/#string-in-c","title":"string in C++","text":"<pre><code>list&lt;char&gt; stack;\nstring str(stack.begin(), stack.end()); // [ , )\n</code></pre>"},{"location":"string/#what-i-have-done_2","title":"What I have done","text":"<p>316. Remove Duplicate Lettersgreedy  </p> <pre><code>istringstream iss(expression);\nint a; int b; char _;\nwhile (iss &gt;&gt; a &gt;&gt; _ &gt;&gt; b) {}\n</code></pre>"},{"location":"string/#what-i-have-done_3","title":"What I have done","text":"<p>592. Fraction Addition and Subtraction </p>"},{"location":"tree/","title":"Tree","text":""},{"location":"tree/#dfs","title":"dfs","text":""},{"location":"tree/#template","title":"Template","text":"<pre><code>def check_same(node1, node2):\n    if node1 is None and node2 is None:\n        return True\n    if node1 is None or node2 is None:\n        return False\n    return node1.val==node2.val and check_same(node1.left, node2.left) and check_same(node1.right, node2.right)\n\ndef dfs(node):\n    if not node:\n        return False\n    if check_same(node, subRoot):\n        return True\n    return dfs(node.left) or dfs(node.right)\n</code></pre>"},{"location":"tree/#what-i-have-done","title":"What I have done","text":"<p>572. Subtree of Another Tree</p>"},{"location":"tree/#serialization","title":"Serialization","text":""},{"location":"tree/#template_1","title":"Template","text":"<pre><code>class Codec:\n\n    def serialize(self, root):\n        if not root:\n            return '[]'\n        Q = deque()\n        Q.append(root)\n        ans = []\n        while Q:\n            node = Q.popleft()\n            if node:\n                ans.append(str(node.val))\n                Q.append(node.left)\n                Q.append(node.right)\n            else:\n                ans.append('null')\n        return '[' + \",\".join(ans) + ']'\n\n    def deserialize(self, data):\n        if data == '[]':\n            return None\n        node_val = data[1:-1].split(',')\n        root = TreeNode(val = node_val[0])\n        i = 1\n        Q = deque()\n        Q.append(root)\n        while Q:\n            node = Q.popleft()\n            if node_val[i] != 'null':\n                node.left = TreeNode(val = node_val[i])\n                Q.append(node.left)\n            i += 1\n            if node_val[i] != 'null':\n                node.right = TreeNode(val = node_val[i])\n                Q.append(node.right)\n            i += 1\n        return root\n</code></pre>"},{"location":"tree/#what-i-have-done_1","title":"What I have done","text":"<p>297. Serialize and Deserialize Binary Tree</p>"},{"location":"tree/#trie","title":"Trie","text":""},{"location":"tree/#template_2","title":"Template","text":"<pre><code>class Trie(object):\n\n    def __init__(self):\n        self.root = {}\n        self.end = '#'\n\n\n    def insert(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: None\n        \"\"\"\n        node = self.root\n        for c in word:\n            node = node.setdefault(c, {})\n        node[self.end] = True\n\n\n    def search(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        node = self.root\n        for c in word:\n            if c not in node:\n                return False\n            node = node[c]\n        if self.end not in node:\n            return False\n        return True\n\n\n    def search_with_dot(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        def dfs(node, word):\n            if word == \"\":\n                if '#' in node:\n                    return True\n                else:\n                    return False\n            c = word[0]\n            if c != '.':\n                if node.get(c):\n                    node = node.get(c)\n                    if dfs(node, word[1:]):\n                        return True\n            else:\n                for key, value in node.items():\n                    if key == '#':\n                        continue\n                    if dfs(value, word[1:]):\n                        return True\n            return False\n        return dfs(self.root, word)\n\n    def startsWith(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: bool\n        \"\"\"\n        node = self.root\n        for c in prefix:\n            if c not in node:\n                return False\n            node = node[c]\n        return True\n</code></pre>"},{"location":"tree/#what-i-have-done_2","title":"What I have done","text":"<p>208. Implement Trie (Prefix Tree) 211. Design Add and Search Words Data Structure</p>"}]}